<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Lucas&#39;s blog</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2020-11-23T16:07:27.651Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>Lucas</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Hello World</title>
    <link href="http://example.com/2020/12/11/hello-world/"/>
    <id>http://example.com/2020/12/11/hello-world/</id>
    <published>2020-12-10T16:56:55.319Z</published>
    <updated>2020-11-23T16:07:27.651Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><a id="more"></a><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for more info. If you get any problems when using Hexo, you can find the answer in &lt;a href=&quot;https://hexo.io/docs/troubleshooting.html&quot;&gt;troubleshooting&lt;/a&gt; or you can ask me on &lt;a href=&quot;https://github.com/hexojs/hexo/issues&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;Quick-Start&quot;&gt;&lt;a href=&quot;#Quick-Start&quot; class=&quot;headerlink&quot; title=&quot;Quick Start&quot;&gt;&lt;/a&gt;Quick Start&lt;/h2&gt;&lt;h3 id=&quot;Create-a-new-post&quot;&gt;&lt;a href=&quot;#Create-a-new-post&quot; class=&quot;headerlink&quot; title=&quot;Create a new post&quot;&gt;&lt;/a&gt;Create a new post&lt;/h3&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>js里面.和[]的区分</title>
    <link href="http://example.com/2020/12/09/js%E9%87%8C%E9%9D%A2.%E5%92%8C[]%E7%9A%84%E5%8C%BA%E5%88%86/"/>
    <id>http://example.com/2020/12/09/js%E9%87%8C%E9%9D%A2.%E5%92%8C[]%E7%9A%84%E5%8C%BA%E5%88%86/</id>
    <published>2020-12-08T17:22:01.000Z</published>
    <updated>2020-12-08T17:22:32.967Z</updated>
    
    
    
    
    
  </entry>
  
  <entry>
    <title>ES5的严格模式</title>
    <link href="http://example.com/2020/12/07/ES5%E7%9A%84%E4%B8%A5%E6%A0%BC%E6%A8%A1%E5%BC%8F/"/>
    <id>http://example.com/2020/12/07/ES5%E7%9A%84%E4%B8%A5%E6%A0%BC%E6%A8%A1%E5%BC%8F/</id>
    <published>2020-12-07T15:43:00.000Z</published>
    <updated>2020-12-07T16:14:42.390Z</updated>
    
    <content type="html"><![CDATA[<h2 id="严格模式"><a href="#严格模式" class="headerlink" title="严格模式"></a><img src="http://image.woshipm.com/fp/images/h1.svg" alt="图片"><font size=5>严格模式</font></h2><p><font size=4>js不是一门很严谨的语言。开发的时候，代码要求也不是很严格。 <strong>严格模式就是对开发时候写的一些内容作了要求</strong></font></p><a id="more"></a><br><br><h2 id="开启严格模式"><a href="#开启严格模式" class="headerlink" title="开启严格模式"></a><img src="http://image.woshipm.com/fp/images/h1.svg" alt="图片"><font size=5><strong>开启严格模式</strong></font></h2><p><font size=4>直接在代码最开始位置写上”use strict”</font></p><br><br><h2 id="严格模式的规则"><a href="#严格模式的规则" class="headerlink" title="严格模式的规则"></a><img src="http://image.woshipm.com/fp/images/h1.svg" alt="图片"><font size=5><strong>严格模式的规则</strong></font></h2><ul><li><font size=4>1、声明变量必须加var关键字</font></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&quot;use strict&quot;</span>;</span><br><span class="line"></span><br><span class="line">a = <span class="number">12</span>;<span class="comment">// 严格模式会报错,a is not defined</span></span><br></pre></td></tr></table></figure><ul><li><font size=4>2、函数的形参不可以重复</font></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params">a,a</span>)</span>&#123;</span><br><span class="line">    <span class="comment">// 严格模式会报错</span></span><br><span class="line">    <span class="built_in">console</span>.log(a)</span><br><span class="line">&#125;</span><br><span class="line">fn(<span class="number">1</span>,<span class="number">2</span>)</span><br></pre></td></tr></table></figure><ul><li><font size=4>3、声明式函数</font></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fun</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="comment">// this是window，严格模式下this是undefined</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">this</span>)</span><br><span class="line">&#125;</span><br><span class="line">fun()</span><br></pre></td></tr></table></figure><br><br>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;严格模式&quot;&gt;&lt;a href=&quot;#严格模式&quot; class=&quot;headerlink&quot; title=&quot;严格模式&quot;&gt;&lt;/a&gt;&lt;img src=&quot;http://image.woshipm.com/fp/images/h1.svg&quot; alt=&quot;图片&quot;&gt;&lt;font size=5&gt;严格模式&lt;/font&gt;&lt;/h2&gt;&lt;p&gt;&lt;font size=4&gt;js不是一门很严谨的语言。开发的时候，代码要求也不是很严格。 &lt;strong&gt;严格模式就是对开发时候写的一些内容作了要求&lt;/strong&gt;&lt;/font&gt;&lt;/p&gt;</summary>
    
    
    
    
    <category term="JavaScript" scheme="http://example.com/tags/JavaScript/"/>
    
    <category term="了解" scheme="http://example.com/tags/%E4%BA%86%E8%A7%A3/"/>
    
  </entry>
  
  <entry>
    <title>字符串</title>
    <link href="http://example.com/2020/12/05/%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    <id>http://example.com/2020/12/05/%E5%AD%97%E7%AC%A6%E4%B8%B2/</id>
    <published>2020-12-05T10:52:28.000Z</published>
    <updated>2020-12-08T17:20:02.495Z</updated>
    
    <content type="html"><![CDATA[<h2 id="字符串的创建"><a href="#字符串的创建" class="headerlink" title="字符串的创建"></a><img src="http://image.woshipm.com/fp/images/h1.svg" alt="图片"><font size=5>字符串的创建</font></h2><ul><li>字面量和构造函数</li><li>字面量：  var str = “hello world”;</li><li>构造函数： var str = new String(“hello world”);</li></ul><br><br>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;字符串的创建&quot;&gt;&lt;a href=&quot;#字符串的创建&quot; class=&quot;headerlink&quot; title=&quot;字符串的创建&quot;&gt;&lt;/a&gt;&lt;img src=&quot;http://image.woshipm.com/fp/images/h1.svg&quot; alt=&quot;图片&quot;&gt;&lt;font </summary>
      
    
    
    
    
    <category term="JavaScript" scheme="http://example.com/tags/JavaScript/"/>
    
    <category term="字符串" scheme="http://example.com/tags/%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    
  </entry>
  
  <entry>
    <title>数组</title>
    <link href="http://example.com/2020/12/05/%E6%95%B0%E7%BB%84/"/>
    <id>http://example.com/2020/12/05/%E6%95%B0%E7%BB%84/</id>
    <published>2020-12-05T07:06:24.000Z</published>
    <updated>2020-12-12T07:23:12.609Z</updated>
    
    <content type="html"><![CDATA[<h2 id="数组的定义"><a href="#数组的定义" class="headerlink" title="数组的定义"></a><img src="http://image.woshipm.com/fp/images/h1.svg" alt="图片"><font size=5>数组的定义</font></h2><ul><li>属于复杂数据类型</li><li>[元素1, 元素2,…]</li><li>啥都能放往里面放，数字、字符串、布尔甚至是函数、数组、对象，还可以是变量<a id="more"></a><br><br></li></ul><h2 id="创建一个数组"><a href="#创建一个数组" class="headerlink" title="创建一个数组"></a><img src="http://image.woshipm.com/fp/images/h1.svg" alt="图片"><font size=5>创建一个数组</font></h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//字面量创建</span></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="string">&#x27;a&#x27;</span>,[],&#123;&#125;]</span><br><span class="line"><span class="comment">//构造函数创建</span></span><br><span class="line"><span class="keyword">var</span> array3 = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="string">&#x27;laowang&#x27;</span>, <span class="string">&#x27;laocheng&#x27;</span>, <span class="string">&#x27;laolv&#x27;</span>, <span class="string">&#x27;laojia&#x27;</span>, <span class="string">&#x27;laoliu&#x27;</span>)</span><br></pre></td></tr></table></figure><br><br><h2 id="数组的长度和索引"><a href="#数组的长度和索引" class="headerlink" title="数组的长度和索引"></a><img src="http://image.woshipm.com/fp/images/h1.svg" alt="图片"><font size=5>数组的长度和索引</font></h2><ul><li>长度length</li><li>索引从0开始，到arr.length-1</li></ul><br><br><h2 id="数组ES3的常用方法"><a href="#数组ES3的常用方法" class="headerlink" title="数组ES3的常用方法"></a><img src="http://image.woshipm.com/fp/images/h1.svg" alt="图片"><font size=5><strong>数组ES3的常用方法</strong></font></h2><ul><li><font size=4>splice</font><ul><li>作用：截取数组中的某些内容，按照数组的索引来截取。原数组改变了</li><li>语法：splice(从哪一个索引位置开始，截取多少个[，替换的新元素])</li><li>参数：3个参数，第三个可选择</li><li>返回值：被截取的元素的集合，是一个数组<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>]</span><br><span class="line"><span class="keyword">var</span> arr1 = arr.splice(<span class="number">0</span>, <span class="number">5</span>, <span class="string">&quot;laoyi&quot;</span>, <span class="string">&quot;laoer&quot;</span>, <span class="string">&quot;laosan&quot;</span>)</span><br><span class="line"><span class="built_in">console</span>.log(arr)<span class="comment">//[&quot;laoyi&quot;,&quot;laoer&quot;,&quot;laosan&quot;,6,7,8]</span></span><br><span class="line"><span class="built_in">console</span>.log(arr1)<span class="comment">//[1, 2, 3, 4, 5]</span></span><br></pre></td></tr></table></figure></li></ul></li></ul><ul><li><font size=4>join</font><ul><li>作用：把数组里面的每一项内容链接起来，变成一个字符串。不会改变原数组</li><li>语法： arr.join(‘连接数组元素的符号’)</li><li>参数：’连接数组元素的符号’</li><li>返回值：用指定符号连接数组元素后的字符串</li><li>注意，如果不指定连接符，默认使用逗号连接</li></ul></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>]</span><br><span class="line"><span class="built_in">console</span>.log(arr.join())<span class="comment">//1, 2, 3, 4, 5, 6, 7, 8</span></span><br><span class="line"><span class="built_in">console</span>.log(arr.join(<span class="string">&#x27;&#x27;</span>))<span class="comment">//12345678</span></span><br><span class="line"><span class="built_in">console</span>.log(arr.join(<span class="string">&#x27;-&#x27;</span>))<span class="comment">//1-2-3-4-5-6-7-8</span></span><br></pre></td></tr></table></figure><ul><li><p><font size=4>sort</font></p><ul><li><p>作用1：元素默认按照转换为的字符串的各个字符的Unicode编码进行排序</p></li><li><p>语法： arr.sort()</p></li><li><p>参数：无</p></li><li><p>返回值：排好序的原数组</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">3000</span>,<span class="number">14000</span>,<span class="number">5000</span>,<span class="number">12000</span>,<span class="number">17000</span>,<span class="number">10000</span>,<span class="number">20000</span>];</span><br><span class="line">arr.sort()</span><br><span class="line"><span class="built_in">console</span>.log(arr)<span class="comment">//(7) [10000, 12000, 14000, 17000, 20000, 3000, 5000]</span></span><br></pre></td></tr></table></figure></li><li><p>作用2：按照排序函数执行排序规则,原数组改变了</p></li><li><p>语法： arr.sort(排序函数)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">arr.sort(<span class="function"><span class="keyword">function</span>(<span class="params">a,b</span>)</span>&#123;</span><br><span class="line">  <span class="comment">//语法</span></span><br><span class="line">  <span class="comment">// 参数</span></span><br><span class="line">  <span class="comment">// a:第一个比较的元素</span></span><br><span class="line">  <span class="comment">// b:第二个比较的元素</span></span><br><span class="line">  <span class="comment">// 如果返回值 &lt; 0 , 那么 a 会被排列到 b 之前</span></span><br><span class="line">  <span class="comment">// 如果返回值== 0 , a 和 b 的相对位置不变</span></span><br><span class="line">  <span class="comment">// 如果返回值 &gt; 0 , b 会被排列到 a 之前</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">3000</span>,<span class="number">14000</span>,<span class="number">5000</span>,<span class="number">12000</span>,<span class="number">17000</span>,<span class="number">10000</span>,<span class="number">20000</span>];</span><br><span class="line">arr.sort(<span class="function"><span class="keyword">function</span>(<span class="params">a,b</span>)</span>&#123;</span><br><span class="line">    <span class="comment">// 从小到大</span></span><br><span class="line">    <span class="comment">// if(a&gt;b)&#123;</span></span><br><span class="line">    <span class="comment">//    return 1; // return a-b</span></span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line">    <span class="comment">// if(a==b)&#123;</span></span><br><span class="line">    <span class="comment">//     return 0; // return a-b</span></span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line">    <span class="comment">// if(a&lt;b)&#123;</span></span><br><span class="line">    <span class="comment">//     return -1; // return a-b</span></span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line">    <span class="comment">// 可以简化成</span></span><br><span class="line">    <span class="keyword">return</span> a-b</span><br><span class="line">&#125;)<span class="comment">//(7) [3000, 5000, 10000, 12000, 14000, 17000, 20000]</span></span><br><span class="line"></span><br><span class="line">arr.sort(<span class="function"><span class="keyword">function</span>(<span class="params">a,b</span>)</span>&#123;</span><br><span class="line">    <span class="comment">// 从大到小</span></span><br><span class="line">    <span class="comment">// if(a&gt;b)&#123;</span></span><br><span class="line">    <span class="comment">//    return -1; //return b-a</span></span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line">    <span class="comment">// if(a==b)&#123;</span></span><br><span class="line">    <span class="comment">//     return 0; //return b-a</span></span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line">    <span class="comment">// if(a&lt;b)&#123;</span></span><br><span class="line">    <span class="comment">//     return 1; //return b-a</span></span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line">    <span class="comment">// 可以简化成</span></span><br><span class="line">    <span class="keyword">return</span> b-a;</span><br><span class="line">&#125;)<span class="comment">//(7) [20000, 17000, 14000, 12000, 10000, 5000, 3000]</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(arr)</span><br></pre></td></tr></table></figure></li><li><p>参数：排序函数</p></li><li><p>返回值：排好序的原数组</p></li></ul></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><ul><li><p><font size=4>concat</font>  </p><ul><li>作用：把多个数组进行拼接。不会改变原数组</li><li>语法： arr1.concat(arr2)</li><li>参数：数组</li><li>返回值：一个拼接好的新的数组<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr1 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line"><span class="keyword">var</span> arr2 = [<span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>]</span><br><span class="line"><span class="keyword">var</span> arr = arr1.concat(arr2);</span><br><span class="line"><span class="built_in">console</span>.log(arr1)<span class="comment">//[1, 2, 3, 4]</span></span><br><span class="line"><span class="built_in">console</span>.log(arr2)<span class="comment">//[5, 6, 7, 8]</span></span><br><span class="line"><span class="built_in">console</span>.log(arr)<span class="comment">//[1, 2, 3, 4, 5, 6, 7, 8]</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p><font size=4>reverse</font>  </p><ul><li>作用：用来反转数组使用的。改变的是原数组</li><li>语法： arr.reverse()</li><li>参数：无</li><li>返回值：是反转以后的数组</li></ul></li><li><p><font size=4>push</font></p><ul><li>作用：在数组末尾追加元素。改变的是原数组</li><li>语法： arr.push(666)，arr.push(666,{})</li><li>参数：可以是很多个，类型不限</li><li>返回值：追加元素以后数组的长度</li></ul></li><li><p><font size=4>unshift</font></p><ul><li>作用：在数组最前面添加元素。改变的是原数组</li><li>语法： arr.unshift(“1111”,”22222”)</li><li>参数：可以是很多个，类型不限</li><li>返回值：追加元素以后数组的长度</li></ul></li><li><p><font size=4>shift</font></p><ul><li>作用：用来删除数组最前面的一个元素。改变的是原数组</li><li>语法： arr.shift()</li><li>参数：无</li><li>返回值：被删除的那个元素</li></ul></li><li><p><font size=4>pop</font></p><ul><li>作用：用来删除数组末尾的一个元素。改变的是原数组</li><li>语法： arr.pop()</li><li>参数：无</li><li>返回值：被删除的那个元素</li></ul></li></ul><br><br><h2 id="数组的遍历及排序"><a href="#数组的遍历及排序" class="headerlink" title="数组的遍历及排序"></a><img src="http://image.woshipm.com/fp/images/h1.svg" alt="图片"><font size=5>数组的遍历及排序</font></h2><p>遍历简单<br>排序(冒泡、选择)略(面试题会问)</p><br><br><h2 id="数组ES5常见方法"><a href="#数组ES5常见方法" class="headerlink" title="数组ES5常见方法"></a><img src="http://image.woshipm.com/fp/images/h1.svg" alt="图片"><font size=5><strong>数组ES5常见方法</strong></font></h2><ul><li><font size=4>indexOf</font><ul><li>作用：用来找到数组中某一项的索引。</li><li>语法： arr.indexOf(“字符串”)</li><li>参数：”字符串”</li><li>返回值：如果找到了，返回索引，number类型; 如果没有找到，返回-1<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="string">&#x27;hello&#x27;</span>,<span class="string">&#x27;world&#x27;</span>,<span class="string">&#x27;xiaoli&#x27;</span>,<span class="number">123</span>,<span class="string">&#x27;xiaowang&#x27;</span>,<span class="number">56</span>]</span><br><span class="line"><span class="keyword">var</span> index1 = arr.indexOf(<span class="string">&#x27;xiaowang&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(index1)<span class="comment">//4</span></span><br><span class="line"><span class="keyword">var</span> index2 = arr.indexOf(<span class="string">&#x27;laowang&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(index2)<span class="comment">//-1</span></span><br><span class="line"><span class="string">``</span><span class="string">` </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&lt;br&gt;</span></span><br><span class="line"><span class="string">&lt;br&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">+ &lt;font size=4&gt;forEach&lt;/font&gt;</span></span><br><span class="line"><span class="string">  + 作用：和for循环一样，就是用来遍历数组的</span></span><br><span class="line"><span class="string">  + 语法：</span></span><br><span class="line"><span class="string">`</span><span class="string">``</span>js</span><br><span class="line"><span class="keyword">var</span> arr = [<span class="string">&#x27;hello&#x27;</span>,<span class="string">&#x27;world&#x27;</span>,<span class="string">&#x27;xiaoli&#x27;</span>,<span class="number">123</span>,<span class="string">&#x27;xiaowang&#x27;</span>,<span class="number">56</span>]</span><br><span class="line">arr.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">item,index,array</span>)</span>&#123;</span><br><span class="line">    <span class="comment">// 数组里面有多少个元素，函数就执行多少次</span></span><br><span class="line">    <span class="comment">// 参数</span></span><br><span class="line">        <span class="comment">//第一个形参：item表示，本次循环到的数组元素的值</span></span><br><span class="line">        <span class="comment">//第二个形参: index表示，本次循环到是第几个数组元素</span></span><br><span class="line">        <span class="comment">//第三个形参: array表示当前正在循环的数组</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li>参数：有三个参数,后两个参数是可选的</li><li>返回值：无<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">arr.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">value,i,array</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;本次循环到的是第&#x27;</span>+ i +<span class="string">&#x27;个数组元素&#x27;</span>)</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;本次循环到的数组元素是&#x27;</span> + value)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ul></li></ul><br><br><ul><li><font size=4>map</font><ul><li>作用：和forEach类似，只不过可以对数组中的每一项进行操作，返回一个新的数组</li><li>语法： <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">arr.map(<span class="function"><span class="keyword">function</span>(<span class="params">item,index,array</span>)</span>&#123;</span><br><span class="line">    <span class="comment">// 数组里面有多少个元素，函数就执行多少次</span></span><br><span class="line">    <span class="comment">// 参数同forEach</span></span><br><span class="line">    <span class="comment">// 返回值：一个新的数组</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li>参数：同forEach</li><li>返回值：一个新的数组<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]</span><br><span class="line"><span class="keyword">var</span> result = arr.map(<span class="function"><span class="keyword">function</span>(<span class="params">v,i,array</span>)</span>&#123;</span><br><span class="line">    <span class="comment">// 在这个函数里面可以对原数组的每一项进行操作</span></span><br><span class="line">    <span class="comment">// 这个函数的返回值就是新数组里面的其中一个元素</span></span><br><span class="line">    <span class="keyword">var</span> num = v*<span class="number">3</span>;</span><br><span class="line">    <span class="keyword">return</span> num;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">console</span>.log(result)<span class="comment">//Array(7) [3, 6, 9, 9, 12, 15, 18]</span></span><br></pre></td></tr></table></figure></li></ul></li></ul><br><br><ul><li><font size=4>filter</font><ul><li>作用：和map使用方式类似，按照我们的条件进行筛选数组，把原始数组中符合条件的筛选出来，组成一个新的数组返回</li><li>语法：<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">arr.filter(<span class="function"><span class="keyword">function</span>(<span class="params">item,index,array</span>)</span>&#123;</span><br><span class="line">    <span class="comment">// 数组里面有多少个元素，函数就执行多少次</span></span><br><span class="line">    <span class="comment">// 参数同forEach</span></span><br><span class="line">    <span class="comment">// 返回值：一个新的数组，里面都是符合条件的数组元素</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 当遍历到一个元素item，如果本次return true说明 符合条件</span></span><br><span class="line">    <span class="comment">// 当遍历到一个元素item，如果本次return false说明 不符合条件</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li>参数：</li><li>返回值：一个新的数组<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">2000</span>,<span class="number">3000</span>,<span class="number">4000</span>,<span class="number">5000</span>,<span class="number">7000</span>,<span class="number">10000</span>,<span class="number">20000</span>]</span><br><span class="line"><span class="keyword">var</span> result = arr.filter(<span class="function"><span class="keyword">function</span>(<span class="params">item</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(item&gt;<span class="number">5000</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">console</span>.log(result)<span class="comment">//Array(3) [7000, 10000, 20000]</span></span><br></pre></td></tr></table></figure></li></ul></li></ul>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;数组的定义&quot;&gt;&lt;a href=&quot;#数组的定义&quot; class=&quot;headerlink&quot; title=&quot;数组的定义&quot;&gt;&lt;/a&gt;&lt;img src=&quot;http://image.woshipm.com/fp/images/h1.svg&quot; alt=&quot;图片&quot;&gt;&lt;font size=5&gt;数组的定义&lt;/font&gt;&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;属于复杂数据类型&lt;/li&gt;
&lt;li&gt;[元素1, 元素2,…]&lt;/li&gt;
&lt;li&gt;啥都能放往里面放，数字、字符串、布尔甚至是函数、数组、对象，还可以是变量</summary>
    
    
    
    <category term="JS基础" scheme="http://example.com/categories/JS%E5%9F%BA%E7%A1%80/"/>
    
    
    <category term="JavaScript基础" scheme="http://example.com/tags/JavaScript%E5%9F%BA%E7%A1%80/"/>
    
    <category term="数组ES3常见方法" scheme="http://example.com/tags/%E6%95%B0%E7%BB%84ES3%E5%B8%B8%E8%A7%81%E6%96%B9%E6%B3%95/"/>
    
    <category term="数组ES5常见方法" scheme="http://example.com/tags/%E6%95%B0%E7%BB%84ES5%E5%B8%B8%E8%A7%81%E6%96%B9%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>JS第一周笔记整理</title>
    <link href="http://example.com/2020/11/23/JS%E7%AC%AC%E4%B8%80%E5%91%A8%E7%AC%94%E8%AE%B0%E6%95%B4%E7%90%86/"/>
    <id>http://example.com/2020/11/23/JS%E7%AC%AC%E4%B8%80%E5%91%A8%E7%AC%94%E8%AE%B0%E6%95%B4%E7%90%86/</id>
    <published>2020-11-23T13:51:51.000Z</published>
    <updated>2020-12-05T13:20:48.839Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、JavaScript基础语法"><a href="#一、JavaScript基础语法" class="headerlink" title="一、JavaScript基础语法"></a>一、JavaScript基础语法</h1><h2 id="1、JavaScript的组成"><a href="#1、JavaScript的组成" class="headerlink" title="1、JavaScript的组成"></a>1、JavaScript的组成</h2><ul><li>ECMASCRIPT(语法)</li><li>BOM浏览器</li><li>DOM文档对象模型<a id="more"></a><h2 id="2、JavaScript代码的书写位置"><a href="#2、JavaScript代码的书写位置" class="headerlink" title="2、JavaScript代码的书写位置"></a>2、JavaScript代码的书写位置</h2></li><li>行内式（不推荐）<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 写在 a 标签的 href 属性上 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;javascript:alert(&#x27;我是一个弹出层&#x27;);&quot;</span>&gt;</span>点击一下试试<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 写在其他元素上 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">onclick</span>=<span class="string">&quot;alert(&#x27;我是一个弹出层&#x27;)&quot;</span>&gt;</span>点一下试试看<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li>内联式<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 在 html 页面书写一个 script 标签，标签内部书写 js 代码 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span></span><br><span class="line"><span class="javascript"> alert(<span class="string">&#x27;我是一个弹出层&#x27;</span>)</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li>外链式<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 我是一个 html 文件 --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 通过 script 标签的 src 属性，把写好的 js 文件引入页面 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;index.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 一个页面可以引入多个 js 文件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;index1.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;index2.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;index3.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alert(<span class="string">&#x27;我是index.js文件&#x27;</span>);</span><br></pre></td></tr></table></figure><h2 id="3、JS里面的注释"><a href="#3、JS里面的注释" class="headerlink" title="3、JS里面的注释"></a>3、JS里面的注释</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 单行注释（快捷键 Ctrl + /）</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    多行注释（快捷键 Shift + Alt + a）</span></span><br><span class="line"><span class="comment">    多行注释</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h2 id="4、变量（重点）"><a href="#4、变量（重点）" class="headerlink" title="4、变量（重点）"></a>4、变量（重点）</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> num = <span class="number">1</span>;<span class="comment">//这是一个变量，名字是num</span></span><br></pre></td></tr></table></figure><h3 id="变量的命名规则"><a href="#变量的命名规则" class="headerlink" title="变量的命名规则"></a>变量的命名规则</h3></li><li>硬性要求，不遵守就报错<ul><li>只能是字母，数字，下划线 _ 以及 美元符 $</li><li>不能是数字开头</li><li>不能是关键字和保留字</li><li>严格区分大小写</li></ul></li><li>规范，不遵守不会报错<ul><li>多个单词，驼峰式命名</li><li>语义化</li></ul></li></ul><h2 id="5、数据类型（重点）"><a href="#5、数据类型（重点）" class="headerlink" title="5、数据类型（重点）"></a>5、数据类型（重点）</h2><h3 id="⑴-数据类型的分类"><a href="#⑴-数据类型的分类" class="headerlink" title="⑴ 数据类型的分类"></a>⑴ 数据类型的分类<br></h3><blockquote><p>基本数据类型（5种）</p></blockquote><ul><li>数值类型(number)<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> num = <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> num2 = <span class="literal">NaN</span>;</span><br></pre></td></tr></table></figure></li><li>字符串类型(string)<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">&quot;123&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> str1 = <span class="string">&#x27;hello world&#x27;</span>;</span><br></pre></td></tr></table></figure></li><li>布尔类型(boolean)<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> isTrue = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">var</span> isFalse = <span class="literal">false</span>;</span><br></pre></td></tr></table></figure></li><li>空(null)<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> n = <span class="literal">null</span>;</span><br></pre></td></tr></table></figure></li><li>undefined(定义了变量名，没赋值)<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> unde;<span class="comment">//undefined</span></span><br></pre></td></tr></table></figure><blockquote><p>引用数据类型(除了以上5种，全都是引用数据类型)</p></blockquote></li><li>object(对象)</li></ul><p><br><br></p><h3 id="⑵-数据类型的判断"><a href="#⑵-数据类型的判断" class="headerlink" title="⑵ 数据类型的判断"></a>⑵ 数据类型的判断</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> num = <span class="number">123</span>;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> num);<span class="comment">//number</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> str = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span>(str));<span class="comment">//string</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> nul = <span class="literal">null</span>;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span>(nul));<span class="comment">//object</span></span><br></pre></td></tr></table></figure><h3 id="⑶-数据类型的转换"><a href="#⑶-数据类型的转换" class="headerlink" title="⑶ 数据类型的转换"></a>⑶ 数据类型的转换</h3><ul><li>转number<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//一、调用Number函数将其他数据类型转换成number类型</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//1、string转number</span></span><br><span class="line"><span class="keyword">var</span> a = <span class="string">&#x27;123&#x27;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Number</span>(a));<span class="comment">//number</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> b = <span class="string">&#x27;abc&#x27;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Number</span>(b));<span class="comment">//NaN</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> c = <span class="string">&#x27;123abb&#x27;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Number</span>(c));<span class="comment">//NaN</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> d = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Number</span>(d));<span class="comment">//0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> e = <span class="string">&#x27;    &#x27;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Number</span>(e));<span class="comment">//0</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//2、boolean转number</span></span><br><span class="line"><span class="keyword">var</span> isTrue = <span class="literal">true</span>;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Number</span>(isTrue));<span class="comment">//1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> isTrue = <span class="literal">false</span>;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Number</span>(isTrue));<span class="comment">//0</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//3、null转number</span></span><br><span class="line"><span class="keyword">var</span> f = <span class="literal">null</span>;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Number</span>(f));<span class="comment">//0</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//4、undefined转number</span></span><br><span class="line"><span class="keyword">var</span> g = <span class="literal">undefined</span>;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Number</span>(g));<span class="comment">//NaN</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//二、调用parseInt函数</span></span><br><span class="line"><span class="keyword">var</span> h = <span class="string">&#x27;123px&#x27;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">parseInt</span>(h));<span class="comment">//123</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> i = <span class="string">&#x27;456px1564abc&#x27;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">parseInt</span>(i));<span class="comment">//456</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> j = <span class="string">&#x27;a123b156&#x27;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">parseInt</span>(j));<span class="comment">//NaN</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> k = <span class="string">&#x27;1.23b156&#x27;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">parseInt</span>(K));<span class="comment">//1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//三、调用parseFloat函数(只能认识一次小数点)</span></span><br><span class="line"><span class="comment">//parseFloat()和parseInt()用法一样,不同的是parseFloat()会保留小数</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//对于其他的非string类型的,比如true,会先转成字符串&quot;true&quot;,再转成number</span></span><br><span class="line"><span class="keyword">var</span> z = <span class="literal">true</span>;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">parseInt</span>(z));<span class="comment">//NaN</span></span><br></pre></td></tr></table></figure></li><li>转string<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1、调用被转换数据类型的变量的toString方法</span></span><br><span class="line"><span class="keyword">var</span> a = <span class="number">123</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> b = a.toString();</span><br><span class="line"><span class="built_in">console</span>.log(b);<span class="comment">//不会改变a, a还是123, 但有个string类型的返回值</span></span><br><span class="line"></span><br><span class="line">a = a.toString();</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> a);<span class="comment">//string</span></span><br><span class="line"></span><br><span class="line">a = <span class="literal">null</span>;</span><br><span class="line"><span class="built_in">console</span>.log(a.toString());</span><br><span class="line"><span class="comment">//报错Uncaught TypeError: Cannot read property &#x27;toString&#x27; of null</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">a = <span class="literal">undefined</span>;</span><br><span class="line"><span class="built_in">console</span>.log(a.toString());</span><br><span class="line"><span class="comment">//报错Uncaught TypeError: Cannot read property &#x27;toString&#x27; of undefined</span></span><br><span class="line"><span class="comment">//null 和 undefined 没有 toString()方法 </span></span><br><span class="line"></span><br><span class="line"><span class="comment">//2、调用String函数, 这个函数也不会改变原来变量的数据类型</span></span><br><span class="line"><span class="keyword">var</span> c = <span class="number">23</span>;</span><br><span class="line">c = <span class="built_in">String</span>(c);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> c);<span class="comment">//string</span></span><br><span class="line"><span class="built_in">console</span>.log(c);<span class="comment">//23</span></span><br><span class="line"></span><br><span class="line">c = <span class="literal">true</span>;</span><br><span class="line">c = <span class="built_in">String</span>(c);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> c);<span class="comment">//string</span></span><br><span class="line"><span class="built_in">console</span>.log(c);<span class="comment">//true</span></span><br><span class="line"></span><br><span class="line">c = <span class="literal">null</span>;</span><br><span class="line">c = <span class="built_in">String</span>(c);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> c);<span class="comment">//string</span></span><br><span class="line"><span class="built_in">console</span>.log(c);<span class="comment">//null</span></span><br><span class="line"></span><br><span class="line">c = <span class="literal">undefined</span>;</span><br><span class="line">c = <span class="built_in">String</span>(c);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> c);<span class="comment">//string</span></span><br><span class="line"><span class="built_in">console</span>.log(c);<span class="comment">//undefined</span></span><br></pre></td></tr></table></figure></li><li>转boolean<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//在 js 中，只有 &#x27;&#x27;、0、null、undefined、NaN，这些是 false，其余都是 true</span></span><br><span class="line"><span class="keyword">var</span> a = <span class="number">123</span>;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Boolean</span>(a));</span><br></pre></td></tr></table></figure><h2 id="6、运算符"><a href="#6、运算符" class="headerlink" title="6、运算符"></a>6、运算符</h2><ul><li>数学运算符</li><li>赋值运算符</li><li>比较运算符</li><li>自增自减运算符</li></ul></li></ul><hr><h1 id="二、分支结构"><a href="#二、分支结构" class="headerlink" title="二、分支结构"></a>二、分支结构</h1><h2 id="1、if条件分支"><a href="#1、if条件分支" class="headerlink" title="1、if条件分支"></a>1、if条件分支</h2><h3 id="⑴-if-语句"><a href="#⑴-if-语句" class="headerlink" title="⑴ if 语句"></a>⑴ if 语句</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(条件)&#123;</span><br><span class="line">  条件为<span class="literal">true</span>时执行的代码</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="⑵-if…-else-语句"><a href="#⑵-if…-else-语句" class="headerlink" title="⑵ if… else 语句"></a>⑵ if… else 语句</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(条件)&#123;</span><br><span class="line">  条件为<span class="literal">true</span>时执行的代码</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">  条件为<span class="literal">false</span>时执行的代码</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="⑶-if…-elseif…-语句"><a href="#⑶-if…-elseif…-语句" class="headerlink" title="⑶ if… elseif… 语句"></a>⑶ if… elseif… 语句</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(条件<span class="number">1</span>)&#123;</span><br><span class="line">  条件<span class="number">1</span>为<span class="literal">true</span>时执行的代码</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(条件<span class="number">2</span>)&#123;</span><br><span class="line">  条件<span class="number">1</span>为<span class="literal">false</span> 条件<span class="number">2</span>为<span class="literal">true</span>时 执行的代码</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="⑷-if…elseif…else…语句"><a href="#⑷-if…elseif…else…语句" class="headerlink" title="⑷ if…elseif…else…语句"></a>⑷ if…elseif…else…语句</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(条件<span class="number">1</span>)&#123;</span><br><span class="line">  条件<span class="number">1</span>为<span class="literal">true</span>时执行的代码</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(条件<span class="number">2</span>)&#123;</span><br><span class="line">  条件<span class="number">1</span>为<span class="literal">false</span> 条件<span class="number">2</span>为<span class="literal">true</span>时 执行的代码</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">  上面的条件均不满足执行的代码</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2、switch条件分支语句"><a href="#2、switch条件分支语句" class="headerlink" title="2、switch条件分支语句"></a>2、switch条件分支语句</h2><h3 id="⑴语法"><a href="#⑴语法" class="headerlink" title="⑴语法"></a>⑴语法</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">switch</span>(要判断的变量)&#123;</span><br><span class="line">  <span class="keyword">case</span> <span class="number">1</span>:<span class="comment">//如果变量值等于1</span></span><br><span class="line">    代码;</span><br><span class="line">    <span class="keyword">break</span>;<span class="comment">//遇到break跳出switch,break后面的代码都不会执行</span></span><br><span class="line">  <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">    代码;</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">    代码;</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">    代码;</span><br><span class="line">    <span class="keyword">break</span>; </span><br><span class="line">  <span class="keyword">default</span>:</span><br><span class="line">    上面的条件均不满足执行的代码;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="⑵switch穿透"><a href="#⑵switch穿透" class="headerlink" title="⑵switch穿透"></a>⑵switch穿透</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 9. 根据一个六位数 数字日期，判断这个日期是这一年的第几天。 (使用switch 穿透编写)</span></span><br><span class="line"><span class="comment">// 例如： 20160211，计算后结果为42</span></span><br><span class="line"><span class="keyword">var</span> num = (+prompt(<span class="string">&#x27;请输入一个八位数字代表当前日期&#x27;</span>, <span class="string">&#x27;比如20201111&#x27;</span>));</span><br><span class="line"><span class="keyword">var</span> year = <span class="built_in">parseInt</span>(num / <span class="number">10000</span>);</span><br><span class="line"><span class="keyword">var</span> date = num - year * <span class="number">10000</span>;</span><br><span class="line"><span class="keyword">var</span> month = <span class="built_in">parseInt</span>(date / <span class="number">100</span>);</span><br><span class="line"><span class="keyword">var</span> day = date - month * <span class="number">100</span>;</span><br><span class="line"><span class="keyword">if</span> ((year % <span class="number">4</span> == <span class="number">0</span>) &amp;&amp; (year % <span class="number">100</span> !== <span class="number">0</span>) || year % <span class="number">400</span> == <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">switch</span> (month) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">12</span>:</span><br><span class="line">            day += <span class="number">30</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">11</span>:</span><br><span class="line">            day += <span class="number">31</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">10</span>:</span><br><span class="line">            day += <span class="number">30</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">9</span>:</span><br><span class="line">            day += <span class="number">31</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">8</span>:</span><br><span class="line">            day += <span class="number">31</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">7</span>:</span><br><span class="line">            day += <span class="number">30</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">6</span>:</span><br><span class="line">            day += <span class="number">31</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">            day += <span class="number">30</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">            day += <span class="number">31</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">            day += <span class="number">29</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">            day += <span class="number">31</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">            <span class="built_in">console</span>.log(day);</span><br><span class="line">    &#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">switch</span> (month) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">12</span>:</span><br><span class="line">            day += <span class="number">30</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">11</span>:</span><br><span class="line">            day += <span class="number">31</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">10</span>:</span><br><span class="line">            day += <span class="number">30</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">9</span>:</span><br><span class="line">            day += <span class="number">31</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">8</span>:</span><br><span class="line">            day += <span class="number">31</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">7</span>:</span><br><span class="line">            day += <span class="number">30</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">6</span>:</span><br><span class="line">            day += <span class="number">31</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">            day += <span class="number">30</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">            day += <span class="number">31</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">            day += <span class="number">28</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">            day += <span class="number">31</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">            <span class="built_in">console</span>.log(day);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3、三元运算"><a href="#3、三元运算" class="headerlink" title="3、三元运算"></a>3、三元运算</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//条件为true时执行语句一,为false时执行语句二</span></span><br><span class="line">条件?语句一:语句二;</span><br></pre></td></tr></table></figure><hr><h1 id="三、循环结构"><a href="#三、循环结构" class="headerlink" title="三、循环结构"></a>三、循环结构</h1><h2 id="1、while循环"><a href="#1、while循环" class="headerlink" title="1、while循环"></a>1、while循环</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span>(条件)&#123;</span><br><span class="line">  条件为<span class="literal">true</span>时执行的代码;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2、do…while循环"><a href="#2、do…while循环" class="headerlink" title="2、do…while循环"></a>2、do…while循环<br></h2><p>无论如何都会执行一次do里面的代码</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">do</span>&#123;</span><br><span class="line">  代码;</span><br><span class="line">&#125;<span class="keyword">while</span>(条件)</span><br></pre></td></tr></table></figure><h2 id="3、for循环"><a href="#3、for循环" class="headerlink" title="3、for循环"></a>3、for循环</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(初始语句①;判断条件②;自身改变④)&#123;</span><br><span class="line">  循环体③</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">  先执行①,然后是②,如果不满足条件就退出循环,满足条件就执行③,然后执行④。</span></span><br><span class="line"><span class="comment">  接着执行②,满足则继续执行,直至不满足条件时退出</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h2 id="4、break中断循环"><a href="#4、break中断循环" class="headerlink" title="4、break中断循环"></a>4、break中断循环</h2><h2 id="5、continue结束本次循环-去执行下一次循环"><a href="#5、continue结束本次循环-去执行下一次循环" class="headerlink" title="5、continue结束本次循环, 去执行下一次循环"></a>5、continue结束本次循环, 去执行下一次循环</h2><hr><h1 id="四、函数"><a href="#四、函数" class="headerlink" title="四、函数"></a>四、函数</h1><h2 id="1、函数简介"><a href="#1、函数简介" class="headerlink" title="1、函数简介"></a>1、函数简介</h2><ul><li>函数中可以封装一些代码</li><li>这些代码在需要执行的时候,调用函数可以执行,不调用不会执行</li><li>用typeof检查一个函数对象时,会返回function</li><li>函数也是个对象</li></ul><h2 id="2、函数的创建及调用"><a href="#2、函数的创建及调用" class="headerlink" title="2、函数的创建及调用"></a>2、函数的创建及调用</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//不推荐使用</span></span><br><span class="line"><span class="keyword">var</span> fun = <span class="keyword">new</span> <span class="built_in">Function</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">  声明式创建语法：</span></span><br><span class="line"><span class="comment">        function 函数名([形参1, 形参2, ..., 形参N])&#123;</span></span><br><span class="line"><span class="comment">            语句;</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fun1</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    concole.log(<span class="string">&#x27;这是声明式创建方式&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//调用函数</span></span><br><span class="line">fun1();</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">  赋值式创建语法：(把一个匿名函数赋值给一个变量)</span></span><br><span class="line"><span class="comment">        var 函数名 = function([形参1, 形参2, ..., 形参N])&#123;</span></span><br><span class="line"><span class="comment">            语句;</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">var</span> fun2 = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;这是赋值式创建方式&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//调用一定要在函数定义之后, 不然会出错</span></span><br><span class="line">fun2();</span><br></pre></td></tr></table></figure><h2 id="3、函数的参数-重点"><a href="#3、函数的参数-重点" class="headerlink" title="3、函数的参数(重点)"></a>3、函数的参数(重点)</h2><p>函数的参数可以以任意形式传入: 值, 变量, 对象, 函数(可以传一个匿名函数)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params">a, b</span>)</span>&#123;</span><br><span class="line">  <span class="comment">//形参相当于在函数内部定义了变量,但是没有赋值</span></span><br><span class="line">  <span class="comment">//var a;</span></span><br><span class="line">  <span class="comment">//var b;</span></span><br><span class="line">  <span class="built_in">console</span>.log(a + b);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//调用的时候, 实参会赋值给函数中对应的形参</span></span><br><span class="line">sum(<span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//调用函数时, 解析器不会检查实参的类型</span></span><br><span class="line">sum(<span class="number">1</span>, <span class="string">&#x27;hello&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//调用函数时, 解析器不会检查实参的个数</span></span><br><span class="line">sum(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="string">&#x27;hello&#x27;</span>);<span class="comment">// 3</span></span><br><span class="line"><span class="comment">//实参数量少于形参, 匹配剩下来的形参的值是undefined</span></span><br><span class="line">sum(<span class="number">1</span>);<span class="comment">//NaN</span></span><br></pre></td></tr></table></figure><h2 id="4、函数的返回值-重点"><a href="#4、函数的返回值-重点" class="headerlink" title="4、函数的返回值(重点)"></a>4、函数的返回值(重点)</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params">a, b</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> a + b;</span><br><span class="line">  <span class="comment">//return 值/变量, return后面的代码都不执行了</span></span><br><span class="line">  <span class="comment">//return 后面啥也不写, 则会返回undefined</span></span><br><span class="line">  <span class="comment">//函数不写return, 返回的也是undefined</span></span><br><span class="line"></span><br><span class="line">  alert(<span class="string">&#x27;hello world!&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5、立即执行函数"><a href="#5、立即执行函数" class="headerlink" title="5、立即执行函数"></a>5、立即执行函数</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// function()&#123;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// &#125;//直接这样写会报错</span></span><br><span class="line"></span><br><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;)<span class="comment">//给一个匿名函数套上括号就不会报错了</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//立即执行函数</span></span><br><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params">a, b</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;)(<span class="number">1</span>, <span class="number">5</span>);</span><br></pre></td></tr></table></figure><h2 id="6、作用域-重点"><a href="#6、作用域-重点" class="headerlink" title="6、作用域(重点)"></a>6、作用域(重点)</h2><ul><li><p>全局作用域</p><ul><li>直接写在script标签中的JS代码, 都在全局作用域</li><li>全局作用域在页面打开时创建, 在页面关闭时销毁</li><li>在全局作用域中有一个全局对象window(在script标签内的所有函数和变量都是它的方法和属性)</li><li>在全局作用域中无法访问到函数作用域</li></ul></li><li><p>函数作用域</p><ul><li>调用函数是创建函数作用域, 函数执行完毕后, 函数作用域销毁</li><li>每调用一次函数,就会产生一个独立的函数作用域</li><li>在函数作用域中可以访问到全局变量</li><li>定义形参就相当于在函数作用域中声明了变量</li><li>在函数中不使用var声明的变量(直接写  变量 = 值; )都会变成全局变量(给人的感觉是全局作用域里好像能访问局部变量, 但其实不是)<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    a = <span class="number">6</span>;</span><br><span class="line">&#125;</span><br><span class="line">fn();</span><br><span class="line"><span class="built_in">console</span>.log(a);</span><br></pre></td></tr></table></figure></li></ul></li><li><p>访问与赋值机制：先在自己的作用域寻找,若没有则继续向上一级寻找,最后在全局变量没有的话报错</p></li></ul>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;一、JavaScript基础语法&quot;&gt;&lt;a href=&quot;#一、JavaScript基础语法&quot; class=&quot;headerlink&quot; title=&quot;一、JavaScript基础语法&quot;&gt;&lt;/a&gt;一、JavaScript基础语法&lt;/h1&gt;&lt;h2 id=&quot;1、JavaScript的组成&quot;&gt;&lt;a href=&quot;#1、JavaScript的组成&quot; class=&quot;headerlink&quot; title=&quot;1、JavaScript的组成&quot;&gt;&lt;/a&gt;1、JavaScript的组成&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;ECMASCRIPT(语法)&lt;/li&gt;
&lt;li&gt;BOM浏览器&lt;/li&gt;
&lt;li&gt;DOM文档对象模型</summary>
    
    
    
    
    <category term="JavaScript" scheme="http://example.com/tags/JavaScript/"/>
    
  </entry>
  
</feed>
